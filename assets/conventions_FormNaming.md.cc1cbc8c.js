import{_ as s,c as e,o as a,a as n}from"./app.74c48566.js";const D=JSON.parse('{"title":"Naming Conventions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Laravel (Backend \u2013 PHP)","slug":"laravel-backend-\u2013-php","link":"#laravel-backend-\u2013-php","children":[]},{"level":2,"title":"Vue.js (Frontend \u2013 Inertia.js + useForm)","slug":"vue-js-frontend-\u2013-inertia-js-useform","link":"#vue-js-frontend-\u2013-inertia-js-useform","children":[]},{"level":2,"title":"Request Handling (Form Submission)","slug":"request-handling-form-submission","link":"#request-handling-form-submission","children":[]},{"level":2,"title":"\u{1F4A1} Why camelCase in Vue makes sense","slug":"\u{1F4A1}-why-camelcase-in-vue-makes-sense","link":"#\u{1F4A1}-why-camelcase-in-vue-makes-sense","children":[]},{"level":2,"title":"Tip: Consistency","slug":"tip-consistency","link":"#tip-consistency","children":[]}],"relativePath":"conventions/FormNaming.md"}'),o={name:"conventions/FormNaming.md"},t=n(`<h1 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a></h1><h2 id="laravel-backend-\u2013-php" tabindex="-1">Laravel (Backend \u2013 PHP) <a class="header-anchor" href="#laravel-backend-\u2013-php" aria-hidden="true">#</a></h2><ul><li><strong>snake_case</strong> for: <ul><li>Database columns</li><li>Eloquent attributes</li><li>DTO keys</li><li>Controller output</li></ul></li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first_name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">first_name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">email_address</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">email_address</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="vue-js-frontend-\u2013-inertia-js-useform" tabindex="-1">Vue.js (Frontend \u2013 Inertia.js + useForm) <a class="header-anchor" href="#vue-js-frontend-\u2013-inertia-js-useform" aria-hidden="true">#</a></h2><ul><li><strong>camelCase</strong> in <code>useForm()</code> and component props (recommended)</li><li>\u26A0\uFE0F Note: This is <strong>not</strong> the default shown in the Inertia.js docs, which use <code>snake_case</code>.</li><li>camelCase matches JavaScript/Vue conventions</li><li>When sending data from Laravel to Vue, Inertia automatically converts keys to camelCase</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useForm</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">emailAddress</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="request-handling-form-submission" tabindex="-1">Request Handling (Form Submission) <a class="header-anchor" href="#request-handling-form-submission" aria-hidden="true">#</a></h2><ul><li>If the form uses camelCase, Laravel must expect camelCase:</li></ul><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">input</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">firstName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><ul><li>\u274C Laravel does <em>not</em> auto-convert <code>firstName</code> to <code>first_name</code></li></ul><hr><h2 id="\u{1F4A1}-why-camelcase-in-vue-makes-sense" tabindex="-1">\u{1F4A1} Why camelCase in Vue makes sense <a class="header-anchor" href="#\u{1F4A1}-why-camelcase-in-vue-makes-sense" aria-hidden="true">#</a></h2><p>When you pass an object from Laravel (e.g. a user or prospect) into a Vue component, Inertia <strong>automatically converts all keys to camelCase</strong>.</p><p>If you re-use those values in a form (e.g. on a validation page or edit page), your form will now have <strong>camelCase</strong> keys.</p><p>This means:</p><ul><li><code>props.prospect.first_name</code> becomes <code>prospect.firstName</code></li><li>Posting this back leads to camelCase input</li><li>DTOs or validators expecting <code>first_name</code> will break</li></ul><p>\u27A1\uFE0F <strong>Using camelCase consistently in Vue avoids these edge cases</strong></p><hr><h2 id="tip-consistency" tabindex="-1">Tip: Consistency <a class="header-anchor" href="#tip-consistency" aria-hidden="true">#</a></h2><table><thead><tr><th>Context</th><th>Convention</th><th>Example</th></tr></thead><tbody><tr><td>Laravel code</td><td><code>snake_case</code></td><td><code>$user-&gt;first_name</code></td></tr><tr><td>Vue component</td><td><code>camelCase</code></td><td><code>form.firstName</code></td></tr><tr><td>Inertia props (PHP)</td><td><code>snake_case</code></td><td><code>&#39;first_name&#39; =&gt; ...</code></td></tr><tr><td>Inertia props (Vue)</td><td><code>camelCase</code></td><td><code>props.user.firstName</code></td></tr><tr><td>Form field name</td><td><code>camelCase</code> <em>(with JS)</em></td><td><code>form.firstName</code></td></tr></tbody></table>`,23),l=[t];function r(c,p,i,d,m,u){return a(),e("div",null,l)}const y=s(o,[["render",r]]);export{D as __pageData,y as default};
